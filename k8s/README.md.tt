## Prepare Kubernetes Cluster

### Create New Kubernetes cluster from DigitalOcean

https://cloud.digitalocean.com/kubernetes

### Install Kubectl

The Kubernetes command-line tool, kubectl, allows you to run commands against Kubernetes clusters. ([link](https://kubernetes.io/docs/tasks/tools/install-kubectl/))
```bash
brew install kubectl
# kubectl version
```

### Connect your cluster

Use the name of your cluster instead of example-cluster-01 in the following command.

Generate API Token & Paste it ([link](https://cloud.digitalocean.com/account/api/tokens))
```bash
DigitalOcean access token: your_DO_token
```

Authenticate through doctl command (doctl is a DigitalOcean's own cli tool [link](https://github.com/digitalocean/doctl))
```bash
brew install doctl
doctl auth init
# paste your_DO_token
```

Add your cluster to local config (you can get your cluster's name from DO's dashboard)
```bash
doctl kubernetes cluster kubeconfig save example-cluster-01
# kubectl config current-context
```

## Ingress
Following ingress document is a summary of digital ocean's official document.
+ I modified LoadBalancer part to fix the issue from generating Let's Encrypt certification.
+ upgraded resource versions
+ add demo nginx-rails app

[official doc](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nginx-ingress-with-cert-manager-on-digitalocean-kubernetes) / 
[cert-manager issue](https://github.com/jetstack/cert-manager/issues/2759)

### Install mandatory resources
```bash
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml
```

### Install load balancer service
this step, kubernetes will automatically ask digital ocean's LoadBalancer.
If you don't have any LoadBalancer unit, it will be automatically create one. (also start charging you)

> k8s/load_balancer.yaml
```yaml
kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  externalTrafficPolicy: Cluster
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
```
```bash
kubectl apply -f k8s/load_balancer.yaml
```

### Confirm that the Ingress Controller Pods have started
```bash
kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx
```

### Confirm that the DigitalOcean Load Balancer was successfully created
```bash
kubectl get svc --namespace=ingress-nginx
```

### Install Cert-Manager
Certificates can be requested and configured by annotating Ingress Resources with the cert-manager.io/issuer annotation, appending a tls section to the Ingress spec, and configuring one or more Issuers or ClusterIssuers to specify your preferred certificate authority.

```bash
# install cert-manager and its Custom Resource Definitions (CRDs) like Issuers and ClusterIssuers.
kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.14.1/cert-manager.yaml

# Verify installation
kubectl get pods --namespace cert-manager
```

### Create SSL Issuer

> k8s/lets_encrypt_issuer.yaml

```yaml
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: <%= admin_email %>
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    # Enable the HTTP-01 challenge provider
    solvers:
    - http01:
        ingress:
          class: nginx
```

```bash
kubectl create -f k8s/lets_encrypt_issuer.yaml
``` 

### Deploying Demo App

[read](https://webcloudpower.com/helm-rails-static-files-path/)

Create service nginx's config-map, where we serve static files, distribute app traffic to replicas.
It will be referenced from k8s/demo.yaml

```bash
kubectl apply -f k8s/config-maps/nginx-conf.yaml
```

Create Demo Ingress, Service, Pod. (to test configuration)

```bash
kubectl apply -f k8s/demo.yaml
```

Check Let's Encrypt progress

```bash
kubectl describe certificate <%= k8s_name %>-demo-tls

# Below is an example success message
Events:
  Type    Reason        Age   From          Message
  ----    ------        ----  ----          -------
  Normal  GeneratedKey  5m   cert-manager  Generated a new private key
  Normal  Requested     5m   cert-manager  Created new CertificateRequest resource "<%= k8s_name %>-demo-tls-1514794236"
  Normal  Issued        5m   cert-manager  Certificate issued successfully
```

To debug cert-manager [read](https://cert-manager.io/docs/faq/acme/).

To delete all demo resources

```bash
kubectl delete -f k8s/demo.yaml
```

### Deploying Production App

```bash
kubectl apply -f k8s/config-maps/nginx-conf.yaml
kubectl apply -f k8s/app.yaml
kubectl apply -f k8s/ingress.yaml
... etc
```

### Auto Scaling
- TODO