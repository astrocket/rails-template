version: 2.1

orbs:
  ruby: circleci/ruby@1.4.0
  doctl: digitalocean/cli@0.1.1
  k8s: circleci/kubernetes@0.1.0
  docker: circleci/docker@2.0.2
executors:
  ruby:
    parameters:
      rails_env:
        type: string
        default: test
    docker:
      - image: circleci/ruby:<%= RUBY_VERSION %>-node
    environment:
      RAILS_ENV: << parameters.rails_env >>
  rspec:
    parameters:
      rails_env:
        type: string
        default: test
    docker:
      - image: circleci/ruby:<%= RUBY_VERSION %>-node
        environment:
          DATABASE_HOST: 127.0.0.1
          DATABASE_PORT: 5432
          DATABASE_USER: postgres
          REDIS_URL: redis://127.0.0.1:6379
      - image: cimg/postgres:13.5
        environment:
          POSTGRES_USER: postgres
      - image: cimg/redis:6.2.6
    environment:
      RAILS_ENV: << parameters.rails_env >>

jobs:
  rspec-test:
    executor:
      name: rspec
      rails_env: test
    steps:
      - checkout
      - run:
          name: Wait for db
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
            dockerize -wait tcp://localhost:6379 -timeout 1m
      - restore_cache:
          keys:
            - bundle-cache-<%= k8s_name %>-{{ checksum "Gemfile.lock" }}
      - run:
          name: bundle install via cache
          command: |
            gem install bundler:2.3.4
            bundle config build.google-protobuf --with-cflags=-D__va_copy=va_copy
            bundle config set path /home/circleci/project/vendor/bundle
            bundle config set without development
            BUNDLE_FORCE_RUBY_PLATFORM=1 bundle install --jobs 5 --retry 3
      - run: sudo apt install -y postgresql-client || true
      - run:
          name: set test database
          command: |
            bundle exec rake db:create
            bundle exec rake db:migrate
      - run:
          name: bundle exec rspec
          command: |
            bundle exec rspec
      - save_cache:
          key: bundle-cache-<%= k8s_name %>-{{ checksum "Gemfile.lock" }}
          paths:
            - /home/circleci/project/vendor/bundle
  build-image-apply:
    executor:
      name: ruby
      rails_env: production
    parameters:
      digitalocean-access-token:
        type: env_var_name
        default: DIGITALOCEAN_ACCESS_TOKEN
        description: The access token to connect DigitalOcean. (@circleci config)
      cluster:
        type: string
        default: <%= k8s_cluster_name %>
      container-registry-path:
        type: string
        default: <%= container_registry_path %>
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
      - checkout
      - k8s/install
      - doctl/install
      - doctl/initialize:
          digitalocean-access-token: <<parameters.digitalocean-access-token>>
      - run: |
          doctl kubernetes cluster kubeconfig save <<parameters.cluster>> --expiry-seconds=3600
      - run:
          name: install base
          command: |
            sudo apt-get update
            sudo apt-get install gettext
      - restore_cache:
          keys:
            - bundle-cache-<%= k8s_name %>-{{ checksum "Gemfile.lock" }}
      - run:
          name: image build
          command: |
            docker build \
              --build-arg rails_env=$RAILS_ENV \
              --build-arg secret_key_base=dummy \
              --build-arg bundle_dir=/home/circleci/project/vendor/bundle \
              -t <<parameters.container-registry-path>>:$CIRCLE_SHA1 \
              -t <<parameters.container-registry-path>>:latest .
      - save_cache:
          key: bundle-cache-<%= k8s_name %>-{{ checksum "Gemfile.lock" }}
          paths:
            - /home/circleci/project/vendor/bundle
      - run:
          name: image push
          command: |
            doctl registry login --expiry-seconds=3600
            docker push <<parameters.container-registry-path>>
      - run:
          name: database migration
          command: |
            IMAGE_TAG=$CIRCLE_SHA1 envsubst < k8s/migration.yaml | kubectl apply -f -
            kubectl wait --timeout=20m --for=condition=complete job/<%= k8s_name %>-migration
      - run:
          name: apply k8s deployments
          command: |
            IMAGE_TAG=$CIRCLE_SHA1 envsubst < k8s/sidekiq.yaml | kubectl apply -f -
            IMAGE_TAG=$CIRCLE_SHA1 envsubst < k8s/web.yaml | kubectl apply -f -

workflows:
  production:
    jobs:
      - rspec-test:
          filters:
            tags:
              only: /^v[0-9]+.[0-9]+.[0-9]+/
            branches:
              ignore: master
      - build-image-apply:
          filters:
            tags:
              only: /^v[0-9]+.[0-9]+.[0-9]+/
            branches:
              ignore: /.*/
          requires:
            - rspec-test